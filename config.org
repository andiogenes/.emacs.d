* Startup
  #+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-screen t)
  #+end_src

* Packages
** Archives
   #+begin_src emacs-lisp
     (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))
   #+end_src

** Use 'use-package' package

   See [[https://github.com/jwiegley/use-package/blob/master/README.md][jwiegley/use-package/README.md]] for package reference.

   #+begin_src emacs-lisp
     (when (not (package-installed-p 'use-package))
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)
   #+end_src

* Look
** Dashboard
   #+begin_src emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-center-content t)
       (setq dashboard-startup-banner dashboard-banner-logo-png))
   #+end_src

** Theme
   #+begin_src emacs-lisp
     (defvar arx/current-theme nil
       "Storage for current theme name.")

     (defun arx/set-theme (theme)
       "Load Custom theme named THEME and put its name in
       `arx/current-theme` variable."
       (load-theme theme t)
       (setq arx/current-theme theme))

     ;; TODO: use `use-package`
     (setq modus-themes-org-blocks 'gray-background)
     (arx/set-theme 'modus-operandi)
   #+end_src
   
** Font
   #+begin_src emacs-lisp
     (let ((font-default "Source Code Pro 10"))
       (set-face-attribute 'default nil :font font-default)
       (set-face-attribute 'fixed-pitch nil :font font-default))
   #+end_src

** Parentheses
   #+begin_src emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-delay 0)
   #+end_src

** Tabs
   #+begin_src emacs-lisp
     (setq-default tab-width 4)
     (setq-default indent-tabs-mode nil)
   #+end_src

** Line numbers
   #+begin_src emacs-lisp
     (global-display-line-numbers-mode)
   #+end_src  

** Frame
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+end_src

** Minimize fringes
   #+begin_src emacs-lisp
     (fringe-mode '(1 . 0))
   #+end_src

** Mode line
*** Use N Î› N O modeline
    #+begin_src emacs-lisp
      (use-package nano-modeline
        :ensure t
        :config
        (setq nano-modeline-position 'bottom)
        (nano-modeline-mode))
    #+end_src

*** Disable 3D highlighting
    #+begin_src emacs-lisp
      (set-face-attribute 'mode-line nil :box nil)
    #+end_src

* Feel
** Fix idiosyncrasies
   #+begin_src emacs-lisp
     (setq make-backup-files nil)
     (setq ring-bell-function 'ignore)
   #+end_src

** Ace-window
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (global-set-key (kbd "M-o") 'ace-window))
   #+end_src

** Expand region
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+end_src

** Preview text replacement
   #+begin_src emacs-lisp
     (use-package anzu
       :ensure t
       :bind
       ([remap query-replace] . anzu-query-replace)
       ([remap query-replace-regexp] . anzu-query-replace-regexp))
   #+end_src

** Matching parentheses
   #+begin_src emacs-lisp
     (use-package elec-pair
       :config
       (electric-pair-mode))
   #+end_src

** Buffer Menu
   #+begin_src emacs-lisp
     ;; Display a list of existing buffers in current window
     (global-set-key (kbd "C-x C-b") 'buffer-menu)

     ;; List buffers in other window using "C-x 4-" prefix
     (global-set-key (kbd "C-x 4 C-x C-b") 'list-buffers)
   #+end_src

*** TODO Use '(use-package emacs ...)

* Major modes

** Org
#+begin_src emacs-lisp
  (defun try-fix-blocks-in-almost-mono-themes ()
    (when-let* ((almost-mono-prefix "almost-mono-")
                (full-theme-name (symbol-name arx/current-theme))
                (_ (string-prefix-p almost-mono-prefix full-theme-name)))
      (setq org-src-fontify-natively t)
      (let* ((theme-key
              (intern
               (substring full-theme-name (length almost-mono-prefix))))
             (theme (cdr (assoc theme-key almost-mono-themes-colors)))
             (foreground (cdr (assoc 'foreground theme)))
             (weaker (cdr (assoc 'weaker theme)))
             (weakest (cdr (assoc 'weakest theme))))
        (set-face-attribute 'org-block-begin-line nil
                            :background weaker
                            :foreground foreground
                            :italic t)
        (set-face-attribute 'org-block nil
                            :background weakest
                            :foreground foreground))))

  (use-package org
    :config
    (try-fix-blocks-in-almost-mono-themes))

  (use-package org-bullets
    :ensure t)

  (add-hook 'org-mode-hook
            (lambda () (org-bullets-mode 1)))
#+end_src

** Clojure
   #+begin_src emacs-lisp
     (use-package clojure-mode)
     (use-package cider)
   #+end_src

** Go
   #+begin_src emacs-lisp
     (use-package go-mode)
   #+end_src

** Zig
   #+begin_src emacs-lisp
     (use-package zig-mode)
   #+end_src

** Lua
   #+begin_src emacs-lisp
     (use-package lua-mode)
   #+end_src

** Haskell
   #+begin_src emacs-lisp
     (use-package haskell-mode)

     (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
     (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
     (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
     (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
     (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
     (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
     (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
   #+end_src

** Elm
   #+begin_src emacs-lisp
     (use-package elm-mode)
   #+end_src
